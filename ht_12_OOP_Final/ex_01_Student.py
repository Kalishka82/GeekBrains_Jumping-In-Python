# –ó–∞–¥–∞–Ω–∏–µ No6
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–∞.
# ‚úî –ò—Å–ø–æ–ª—å–∑—É—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –§–ò–û –Ω–∞ –ø–µ—Ä–≤—É—é –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤.
# ‚úî –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ —Ñ–∞–π–ª–∞ CSV –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# –î—Ä—É–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã.
# ‚úî –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ (–æ—Ç 2 –¥–æ 5) –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ (–æ—Ç 0 –¥–æ 100).
# ‚úî –¢–∞–∫–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Ç–µ—Å—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
# –∏ –ø–æ –æ—Ü–µ–Ω–∫–∞–º –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤–º–µ—Å—Ç–µ –≤–∑—è—Ç—ã—Ö.
import csv

_MIN_MARK = 2
_MAX_MARK = 5
_MIN_TEST_RES = 0
_MAX_TEST_RES = 100

SUBJECT_FILE = 'ex_01_subject.csv'
STUDENT_FILE = 'ex_01.student.json'


class CheckName:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –§–ò–û –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤ –∏ –ø–µ—Ä–≤—É—é –∑–∞–≥–ª–∞–≤–Ω—É—é"""
    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    def __set__(self, instance, value: str):
        if not value.isalpha():
            return ValueError(f'"{value}" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã')
        if not value.istitle():
            return ValueError(f'–ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –≤ "{value}" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω–æ–π')
        setattr(instance, self.param_name, value)


class CheckMarkTest:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ü–µ–Ω–æ–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑–º–æ–∂–Ω—ã—Ö"""
    def __init__(self, min_value: int, max_value: int):
        self.min_value = min_value
        self.max_value = max_value

    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    def __set__(self, instance, value):
        if not (self.min_value <= value <= self.max_value):
            return ValueError(f'–û—Ü–µ–Ω–∫–∞ "{value}" –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—É –æ—Ç {self.min_value} –¥–æ {self.max_value}')
        setattr(instance, self.param_name, value)


class Student:
    first_name = CheckName()
    mid_name = CheckName()
    last_name = CheckName()
    marks = list[CheckMarkTest(_MIN_MARK, _MAX_MARK)]
    tests = list[CheckMarkTest(_MIN_TEST_RES, _MAX_TEST_RES)]

    def __init__(self, first_name: str, mid_name: str, last_name: str):
        self.first_name = first_name
        self.mid_name = mid_name
        self.last_name = last_name

    @staticmethod
    def calculate_averages():
        dict_averages = {}
        with open(SUBJECT_FILE, 'r', encoding='utf-8', newline='') as f:
            filereader = csv.DictReader(f, delimiter=';')
            for line in filereader:
                marks = list(map(int, line['Marks'].split()))
                tests = list(map(int, line['Tests'].split()))
                aver_mark = sum(marks) / len(marks)
                aver_test = sum(tests) / len(tests)
                dict_averages[line['Subject']] = ('%.2f' % aver_mark, '%.2f' % aver_test)

            for key, value in dict_averages.items():
                print(f'{key}: —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Ç–µ—Å—Ç–∞–º={value[1]}')

            sum_marks = sum(float(key[0]) for _, key in dict_averages.items())
            aver_mark_all_subj = round(sum_marks / len(dict_averages), 2)
            print(f'–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º={aver_mark_all_subj}')


class Main:
    stud_1 = Student('–ò–≤–∞–Ω', '–ò–í–ê–ù–æ–≤–∏—á', '–ü–µ—Ç—Ä–æ–≤123')
    print(stud_1.__dict__)
    stud_1.calculate_averages()


if __name__ == '__main__':
    Main()
