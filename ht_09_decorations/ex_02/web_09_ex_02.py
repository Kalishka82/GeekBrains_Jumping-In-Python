# –ó–∞–¥–∞–Ω–∏–µ No2
# üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 1.
# üìå –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –≤–Ω–µ—à–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.
# üìå –û–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ö–æ–¥—è—Ç –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é-—É–≥–∞–¥–∞–π–∫—É —á–∏—Å–ª–∞ –≤
# –¥–∏–∞–ø–∞–∑–æ–Ω—ã [1, 100] –∏ [1, 10].
# üìå –ï—Å–ª–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç, –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.

import random
from functools import wraps
from typing import Callable

__all__ = ['deco', 'guess_num']


def deco(func: Callable) -> Callable[[int, int], None]:
    min_num = min_try = 1
    max_num = 100
    max_try = 10

    @wraps(func)
    def wrapper(secret_num: int, guess_try: int, *args, **kwargs):
        if not min_num <= secret_num <= max_num:
            secret_num = random.randint(min_num, max_num + 1)
        if not min_try <= guess_try <= max_try:
            guess_try = random.randint(min_try, max_try + 1)
        return func(secret_num, guess_try, *args, **kwargs)
    return wrapper


@deco
def guess_num(secret_num: int, quess_try: int):
    for i in range(1, quess_try + 1):
        answer = int(input(f'–ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏: {i}. \n'
                           f'–£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100: '))
        if answer == secret_num:
            print('–ß–∏—Å–ª–æ —É–≥–∞–¥–∞–Ω–æ!')
            break
        elif answer > secret_num:
            print('–ú–µ–Ω—å—à–µ ')
        else:
            print('–ë–æ–ª—å—à–µ')


if __name__ == '__main__':
    guess_num(15, 4)
